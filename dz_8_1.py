# Написать функцию email_parse(<email_address>), которая при помощи
# регулярного выражения извлекает имя пользователя и почтовый домен
# из email адреса и возвращает их в виде словаря. Если адрес не валиден,
# выбросить исключение ValueError.
#Пример:
#    >>> email_parse('someone@geekbrains.ru')
#   {'username': 'someone', 'domain': 'geekbrains.ru'}

import re


def email_parse(email):
    pattern = r"(^[a-zA-Z0-9_.'-]+@[a-zA-Z0-9.-]+\.[a-zA-Z.]{2,4}$)"
    number_re = re.compile(pattern)
    if re.findall(number_re, in_email):
        parse = re.split(r'@', email)
        res_dict['username'] = parse[0]
        res_dict['domain'] = parse[1]
        return res_dict
    else:
        raise ValueError('Ошибка в написании email-адреса')


res_dict = {
    'username' : '',
    'domain' : ''
 }


in_email = '8some_one@geek-brains.ru'
#
if __name__ == '__main__':
    print('Извлечённые данные:\n ', email_parse(in_email))

# Извлечённые данные:
#  {'username': '8some_one', 'domain': 'geek-brains.ru'}
#
# Ошибка в написании email-адреса:  8some_#ne@geek-brains.ru
# Ошибка в написании email-адреса:  8some_@ne@geek-brains.ru
# Ошибка в написании email-адреса:  8some_ ne@geek-brains.ru

# Единственный действительно точный способ отличить реальные,
# действительные адреса электронной почты от недействительных
# – это отправить ему письмо .
#
# Формальные требования к электронному адресу:
# Адрес должен содержать специальный символ "@", который отделяет
# имя пользователя почтовой системы от доменного имени;
# Адрес не должен содержать символов "пробелов", ",", ":", ";", "!",
# "#", "%", "*", "(", ")", "=", "+", "{", "}", "[", "]/", """, "'",
# "/", "\" и "|";
# Адрес должен состоять только из латинских символов;
# Так как в Интернете не существует компьютеров, имеющих доменные
# имена первого уровня, то после символа "@" должна быть как минимум
# одна ".";
# После последней точки должно быть не менее 2-х и не более 4-х
# символов, причем наличие цифр не допускается;
# Между последней точкой и символом "@" должно быть не менее 2-х символов
# Слева от "@" должно быть не менее четырех символов.
#
# pattern совместимый с RFC5322 и охватывающий 99,99 % входных адресов
# электронной почты говорят выглядит как-то так:
# (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=^_`{|}~-]+)*
# |"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]
# |\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")
# @
# (?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?
# |\[(?:(?:(2(5[0-5]|[0-4][0-9])
# |1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])
# |1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]
# |\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
# но это не точно.

